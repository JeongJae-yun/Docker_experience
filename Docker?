# Docker 기본 개념      
     
         
## *Docker?    
- 간단하게 생각하면 개발을 할 때, 고려해야할 설정 부분들이 많다.   
- version을 맞춰주는 것도 있고, vender에 따라 다르게 설정해야하는 부분들도 있다.      
- 이런 부분들에서 어떠한 개발환경에 있다 하더라도 호환성을 신경 쓰지 않고 서로 맞춰주기 위한 Tool. (나는 이렇게 이해했다)    
- 팀 프로젝트를 하더라도 각자 만든거를 누군가 일괄적으로 맞춰주면 편하듯..    
- 쉽게 패키징하여 쉽게 배포를 한다.      
- Docker는 Linux를 기반으로 한다. 그렇다보니 Open Source이고 현재도 계속해서 Develop이 진행중이다.    
         
<img width="112" alt="도커 로고" src="https://user-images.githubusercontent.com/55985789/80305893-c979d500-87fa-11ea-86a5-2932033b42f0.png">     
- 도커의 로고는 고래이다. 왜?       
- Docker는 컨테이너에 한 번에 설정 정보를 담아서 날라준다. 배달한다.      
- 고래가 정박해 있다가 물건을 실어나르듯 설정 정보에 맞춰 가져가는 것이다.     
       
# 특징       
> 초기 구축 시간을 줄인다. 
>> 많이 고려해야 할 부분들이 줄어든다.

## 컨테이너형 가상화 VS 하이퍼바이저형 가상화        
> 컨테이너형 가상화(Docker)        
>> HostOS와 공유한다. 실제 가상머신처럼 GuestOS를 실제로 설치하지 않는다.       
>> 최소한의 파일로 도킹을 한다.      
>> 어찌보면 HostOS에 의존적이다. = HostOS영향을 많이 받는다.          
>> IMG파일에 들어가있어서 용량이 적고 빠르다.       
>> 오버헤드가 거의 없다.      

> 하이퍼바이저형 가상화 <VM>      
>> Hypervisor위에 GuestOS를 설치한다.     
>> GuestOS위에 사용할 APP을 설치한다.      
>> Guest OS ? : Ubuntu, Centos,..etc.. 메모리, 공간 차지 힘들고 느릴수 있다. 컨테이너형 가상화에 비해!!            
>> 컨테이너형 가상화에 비해 오버헤드가 조금 있다.       
>> GuestOS는 HostOS에 독립적이다!!       

## VM(Virtual Machine) VS Docker     
VM(Virtual Machine) : 웹 호스팅을 하지 않는 이상 가상 머신 컨트롤 할 필요가 없다.      
Docker : 개발자, 서비스를 할 경우, 필요할 수 있다.      


